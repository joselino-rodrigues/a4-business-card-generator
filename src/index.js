/**
 * API Principal do A4 Business Card Generator
 * Fun√ß√£o principal que coordena a gera√ß√£o de cart√µes de visita em PDF
 */

const PDFGenerator = require('./pdfGenerator');
const { validateCards } = require('./utils/validate');

/**
 * Fun√ß√£o principal para gerar cart√µes de visita
 * @param {Array} cards - Array de objetos com dados dos cart√µes
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Promise<string>} - Caminho do arquivo PDF gerado
 */
async function generateBusinessCards(cards, options = {}) {
    try {
        console.log('üöÄ Iniciando gera√ß√£o de cart√µes de visita...');
        
        // Validar dados de entrada
        if (!Array.isArray(cards)) {
            throw new Error('Par√¢metro "cards" deve ser um array');
        }
        
        if (cards.length === 0) {
            throw new Error('Array de cart√µes n√£o pode estar vazio');
        }
        
        // Validar dados dos cart√µes
        console.log('üîç Validando dados dos cart√µes...');
        const validatedCards = validateCards(cards);
        
        // Configurar op√ß√µes padr√£o
        const config = {
            output: options.output || 'business-cards.pdf',
            template: options.template || null,
            showCutLines: options.showCutLines !== false,
            cardsPerPage: options.cardsPerPage || 10,
            ...options
        };
        
        // Criar inst√¢ncia do gerador de PDF
        const pdfGenerator = new PDFGenerator(config.template);
        
        // Gerar PDF
        const outputPath = await pdfGenerator.generatePDF(validatedCards, config.output, config);
        
        return outputPath;
        
    } catch (error) {
        console.error('‚ùå Erro na gera√ß√£o de cart√µes:', error.message);
        throw error;
    }
}

/**
 * Gera cart√µes de visita a partir de arquivo JSON
 * @param {string} jsonPath - Caminho do arquivo JSON
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Promise<string>} - Caminho do arquivo PDF gerado
 */
async function generateFromJSON(jsonPath, options = {}) {
    try {
        console.log(`üìñ Lendo arquivo JSON: ${jsonPath}`);
        
        // Criar inst√¢ncia do gerador de PDF
        const pdfGenerator = new PDFGenerator(options.template);
        
        // Configurar caminho de sa√≠da
        const outputPath = options.output || 'business-cards.pdf';
        
        // Gerar PDF a partir do JSON
        const result = await pdfGenerator.generateFromJSON(jsonPath, outputPath, options);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar PDF do JSON:', error.message);
        throw error;
    }
}

/**
 * Cria um PDF de exemplo com cart√µes de demonstra√ß√£o
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Promise<string>} - Caminho do arquivo PDF gerado
 */
async function generateSamplePDF(options = {}) {
    try {
        console.log('üé® Gerando PDF de exemplo...');
        
        // Criar inst√¢ncia do gerador de PDF
        const pdfGenerator = new PDFGenerator(options.template);
        
        // Configurar caminho de sa√≠da
        const outputPath = options.output || 'sample-business-cards.pdf';
        
        // Gerar PDF de exemplo
        const result = await pdfGenerator.generateSamplePDF(outputPath);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Erro ao gerar PDF de exemplo:', error.message);
        throw error;
    }
}

/**
 * Calcula informa√ß√µes sobre o PDF a ser gerado
 * @param {Array} cards - Array de cart√µes
 * @param {Object} options - Op√ß√µes de configura√ß√£o
 * @returns {Object} - Informa√ß√µes sobre o PDF
 */
function calculatePDFInfo(cards, options = {}) {
    try {
        // Criar inst√¢ncia do gerador de PDF
        const pdfGenerator = new PDFGenerator(options.template);
        
        // Calcular informa√ß√µes
        const info = pdfGenerator.calculatePDFInfo(cards);
        
        return info;
        
    } catch (error) {
        console.error('‚ùå Erro ao calcular informa√ß√µes do PDF:', error.message);
        throw error;
    }
}

/**
 * Valida dados de cart√µes sem gerar PDF
 * @param {Array} cards - Array de cart√µes para validar
 * @returns {Object} - Resultado da valida√ß√£o
 */
function validateCardsData(cards) {
    try {
        const validatedCards = validateCards(cards);
        
        return {
            valid: true,
            cards: validatedCards,
            count: validatedCards.length,
            message: 'Todos os cart√µes s√£o v√°lidos'
        };
        
    } catch (error) {
        return {
            valid: false,
            cards: null,
            count: 0,
            message: error.message
        };
    }
}

// Exportar fun√ß√µes principais
module.exports = {
    generateBusinessCards,
    generateFromJSON,
    generateSamplePDF,
    calculatePDFInfo,
    validateCardsData,
    
    // Exportar classes para uso avan√ßado
    PDFGenerator,
    CardGenerator: require('./cardGenerator'),
    
    // Exportar utilit√°rios
    validateCards
};
